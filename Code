#1010 non-Overlapping Moore Sequence Detector
#verilog code

module morfsm(din, reset, clk, y); 
output reg y; 
input din; 
input clk; 
input reset; 
reg [2:0] cst, nst; 
parameter S0 = 3'b000, 
          S1 = 3'b001, 
          S2 = 3'b010, 
          S3 = 3'b100, 
            S4 = 3'b101; 
always @(cst or din) 
 begin 
 case (cst) 
   S0: if (din == 1'b1) 
          begin 
         nst = S1; 
          y=1'b0; 
          end 
      else 
          begin 
          nst = cst; 
          y=1'b0; 
          end   
S1: if (din == 1'b0) 
          begin 
        nst = S2; 
          y=1'b0; 
          end 
       else 
          begin 
          nst = cst; 
          y=1'b0; 
          end 
   S2: if (din == 1'b1) 
          begin 
         nst = S3; 
          y=1'b0; 
          end     
            else 
          begin 
          nst = S0; 
          y=1'b0; 
          end   
S3: if (din == 1'b0) 
          begin 
         nst = S4; 
          y=1'b0; 
          end 
       else 
          begin 
          nst = S1; 
          y=1'b0; 
          end 
S4: if (din == 1'b0) 
          begin 
         nst = S0; 
          y=1'b1; 
          end 
          else 
          begin 
          nst = S1; 
          y=1'b1; 
          end 
   default: nst = S0; 
  endcase 
end 
always@(posedge clk) 
begin 
if (reset) 
cst <= S0; 
else 
cst <= nst; 
end 
endmodule

#testbench code
module morfsm_tb; 
reg din,clk,reset; 
wire y; 
morfsm m1(din, reset, clk, y); 
initial 
begin 
reset=0       
;clk=0;din=0; 
$monitor($time, , ,"c=%b",clk,,"y=%b",y,,"r=%b",reset,,"d=%b",din); 
#10 din=1; 
#10 din=1; 
#10 din=1; 
#10 din=0; 
#10 din=1; 
#10 din=0; 
#10 din=1; 
#10 din=0; 
#10 din=1; 
//#5 reset=1; 
//#5 reset=0; 
end
 always
 #5 clk=~clk;
 initial
 #100 $finish ;
 endmodule

#1010 Overlapping Moore Sequence Detector Verilog Code
#verilog code

module morfsmolp(din, reset, clk, y); 
input din; 
input clk; 
input reset; 
output reg y; 
reg [2:0] cst, nst; 
parameter S0 = 3'b000, 
S1 = 3'b001, 
S2 = 3'b010, 
S3 = 3'b100, 
            S4 = 3'b101; 
always @(cst or din) 
 begin 
 case (cst) 
   S0: if (din == 1'b1) 
          begin 
         nst = S1; 
          y=1'b0; 
          end 
      else nst = cst; 
   S1: if (din == 1'b0) 
          begin 
        nst = S2; 
          y=1'b0; 
          end 
       else 
          begin 
          nst = cst; 
          y=1'b0; 
          end 
   S2: if (din == 1'b1) 
          begin 
         nst = S3; 
          y=1'b0; 
          end     
            else 
          begin 
          nst = S0; 
          y=1'b0; 
          end 
   S3: if (din == 1'b0) 
          begin 
         nst = S4; 
          y=1'b0; 
          end 
       else 
          begin 
          nst = S1; 
          y=1'b0; 
          end 
S4: if (din == 1'b0) 
          begin 
         nst = S1; 
          y=1'b1; 
          end 
          else 
          begin 
          nst = S3; 
          y=1'b1; 
          end 
   default: nst = S0; 
  endcase 
end 
always@(posedge clk) 
begin 
          if (reset) 
          cst <= S0; 
          else 
            cst <= nst; 
end 
endmodule

#testbench code
module morfsmolp_tb; 
reg din,clk,reset; 
wire y; 
morfsmolp m1(din, reset, clk, y); 
initial 
begin 
reset=0       ;clk=0;din=0; 
$monitor($time,,,"c=%b",clk,,"y=%b",y,,"r=%b",reset,,"d=%b",din);
 #10din=1;
 #10din=1;
 #10din=1;
 #10din=0;
 #10din=1;
 #10din=0;
 #10din=1;
 #10din=0;
 #10din=1;
 //#5 reset=1;
 //#5 reset=0;
 end
 always
 #5clk=~clk;
 initial
 #100$finish ;
endmodule
